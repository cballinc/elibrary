package com.akun.elibrary.dao.imp;

import java.util.ArrayList;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.akun.elibrary.bean.Literatureforborrow;
import com.akun.elibrary.bean.LiteratureforborrowExample;
import com.akun.elibrary.bean.LiteratureforborrowKey;
import com.akun.elibrary.dao.LiteratureforborrowDAO;

public class LiteratureforborrowDAOImpl extends SqlMapClientDaoSupport implements LiteratureforborrowDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public LiteratureforborrowDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int countByExample(LiteratureforborrowExample example) {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("dbo_literatureForBorrow.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int deleteByExample(LiteratureforborrowExample example) {
        int rows = getSqlMapClientTemplate().delete("dbo_literatureForBorrow.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int deleteByPrimaryKey(LiteratureforborrowKey key) {
        int rows = getSqlMapClientTemplate().delete("dbo_literatureForBorrow.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public void insert(Literatureforborrow record) {
        getSqlMapClientTemplate().insert("dbo_literatureForBorrow.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public void insertSelective(Literatureforborrow record) {
        getSqlMapClientTemplate().insert("dbo_literatureForBorrow.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public List selectByExample(LiteratureforborrowExample example) {
        List list = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public Literatureforborrow selectByPrimaryKey(LiteratureforborrowKey key) {
        Literatureforborrow record = (Literatureforborrow) getSqlMapClientTemplate().queryForObject("dbo_literatureForBorrow.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int updateByExampleSelective(Literatureforborrow record, LiteratureforborrowExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("dbo_literatureForBorrow.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int updateByExample(Literatureforborrow record, LiteratureforborrowExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("dbo_literatureForBorrow.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int updateByPrimaryKeySelective(Literatureforborrow record) {
        int rows = getSqlMapClientTemplate().update("dbo_literatureForBorrow.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    public int updateByPrimaryKey(Literatureforborrow record) {
        int rows = getSqlMapClientTemplate().update("dbo_literatureForBorrow.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table dbo.literatureForBorrow
     *
     * @ibatorgenerated Thu Apr 05 15:26:19 CST 2012
     */
    private static class UpdateByExampleParms extends LiteratureforborrowExample {
        private Object record;

        public UpdateByExampleParms(Object record, LiteratureforborrowExample example) {
            super(example);
            this.record = record;
        }

        @SuppressWarnings("unused")
		public Object getRecord() {
            return record;
        }
    }
    //========================================================================
    /**
     * 获取记录数
     */
    @Override
	public int getBorrowCount(String key) {
    	int result = 0;
    	try {
			result = Integer.parseInt(getSqlMapClientTemplate().queryForObject("dbo_literatureForBorrow.getBorrowListCount", key).toString());
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
    	return result;
    }
    /**
     * 获取借阅列表
     */
    @SuppressWarnings("unchecked")
	@Override
    public List getBorrowList(String key, int start, int limit) {
    	List<Literatureforborrow> results = new ArrayList<Literatureforborrow>();
    	try {
			results = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.getBorrowList", key, start, limit);
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
		return results;
    }
    /**
     * 按图书名称获取借阅列表
     */
    @SuppressWarnings("unchecked")
	@Override
    public List getBorrowListByName(String key, int start, int limit) {
    	List<Literatureforborrow> results = new ArrayList<Literatureforborrow>();
    	try {
			results = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.getBorrowListByName", key, start, limit);
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
		return results;
    }
    /**
     * 按图书名Group获取借阅列表
     */
    @SuppressWarnings("unchecked")
	@Override
    public List getBorrowListByGroup(String key, int start, int limit) {
    	List<Literatureforborrow> results = new ArrayList<Literatureforborrow>();
    	try {
			results = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.getBorrowListByGroup", key, start, limit);
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
		return results;
    }
    /**
     * 按图书category获取借阅列表
     */
    @SuppressWarnings("unchecked")
	@Override
    public List getBorrowListByCategory(String key, int start, int limit) {
    	List<Literatureforborrow> results = new ArrayList<Literatureforborrow>();
    	try {
			results = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.getBorrowListByCategory", key, start, limit);
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
		return results;
    }
    /**
     * 获取已登录学生的借阅过的书籍列表
     */
    @SuppressWarnings("unchecked")
	@Override
    public List<Literatureforborrow> getBorrowListBySnumber(String theLoginedSnumber, int start,
    		int limit) {
    	List<Literatureforborrow> results = new ArrayList<Literatureforborrow>();
    	try {
			results = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.getBorrowListBySnumber",theLoginedSnumber, start, limit);
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
		return results;
    }
    /**
     * 获取未归还借阅信息列表
     */
    @SuppressWarnings("unchecked")
	@Override
    public List getBorrowListNotReturned(String key, int start, int limit) {
    	List<Literatureforborrow> results = new ArrayList<Literatureforborrow>();
    	try {
			results = getSqlMapClientTemplate().queryForList("dbo_literatureForBorrow.getBorrowListNotReturned", key, start, limit);
		}
		catch (Exception e) {
			logger.error(e.toString());
		}		
		return results;
    }
}